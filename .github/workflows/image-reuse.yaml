name: Reusable Container Image Build Workflow

on:
  workflow_call:
    inputs:
      image_registry:
        description: 'Container registry URL'
        required: true
        type: string
      image_name:
        description: 'Container image name'
        required: true
        type: string
    secrets:
      ghcr_username:
        description: 'GitHub username for authentication'
        required: true
      ghcr_password:
        description: 'GitHub token for authentication'
        required: true
    outputs:
      image:
        description: 'Built container image name'
        value: ${{ jobs.build.outputs.image }}
      digest:
        description: 'Built container image digest'
        value: ${{ jobs.build.outputs.digest }}

jobs:
  build:
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      # - name: Checkout the repository  # docker/build-push-actionでGit Contextを使う場合は不要
      #   uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.image_registry }}
          username: ${{ secrets.ghcr_username }}
          password: ${{ secrets.ghcr_password }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image_registry }}/${{ inputs.image_name }}

      - name: Build and push Container image
        id: build
        uses: docker/build-push-action@v6
        with:  # contextを指定しないことでGit Contextが使われる
          # context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}  # Get tags from outputs of meta step
          labels: ${{ steps.meta.outputs.labels }}  # Get labels from outputs of meta step

      - name: Output image
        id: image
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name="${{ inputs.image_registry }}/${{ inputs.image_name }}"
          echo "image=$image_name" >> "$GITHUB_OUTPUT"
